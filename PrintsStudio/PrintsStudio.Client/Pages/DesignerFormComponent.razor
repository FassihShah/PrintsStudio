@page "/designer-form"
@inject Services.UserService Us
@inject Services.DesignerService Ds
@inject IJSRuntime Js
@inject NavigationManager Navigation
@using PrintsStudio.Client.Models

<style>
    .designer-form-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        animation: fadeIn 0.3s ease-in-out;
    }

    .designer-form-container {
        background-color: #ceedec;
        padding: 30px 25px;
        border-radius: 1rem;
        width: 100%;
        max-width: 480px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.25);
        font-family: 'Lato', sans-serif;
        box-sizing: border-box;
    }

    .form-title {
        font-family: 'Merriweather', serif;
        color: #242f66;
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 20px;
        text-align: center;
    }

    .form-group {
        margin-bottom: 16px;
        display: flex;
        flex-direction: column;
    }

    label {
        font-weight: 600;
        color: #242f66;
        margin-bottom: 6px;
    }

    .form-control {
        padding: 8px 12px;
        font-family: 'Lato', sans-serif;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 6px;
        resize: none;
    }

    .checkbox-group {
        flex-direction: row;
        align-items: center;
        gap: 8px;
        display: flex;
    }

    .checkbox-group input[type="checkbox"] {
        width: 18px;
        height: 18px;
        cursor: pointer;
    }

    .checkbox-group label {
        margin: 0;
        cursor: pointer;
    }

    .button-group {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

    .btn-save, .btn-cancel {
        padding: 10px 24px;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s ease-in-out;
        color: white;
    }

    .btn-save {
        background-color: #07a6a6;
    }

    .btn-save:hover {
        background-color: #068c8c;
    }

    .btn-cancel {
        background-color: #999999;
    }

    .btn-cancel:hover {
        background-color: #777777;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }
</style>

@if (showForm && user != null && designer != null)
{
    <div class="designer-form-overlay">
        <div class="designer-form-container">
            <h2 class="form-title">Complete Your Designer Profile</h2>

            <div class="form-group">
                <label>Bio</label>
                <textarea class="form-control" @bind="@designer.Bio" rows="4"></textarea>
            </div>

            <div class="form-group">
                <label>Enter your Portfolio Link</label>
                <input type="url" class="form-control" @bind="@designer.PortfolioUrl" />
            </div>

            <div class="form-group checkbox-group">
                <input type="checkbox" id="availability" @bind="@designer.IsAvailable" />
                <label for="availability">I am available for work</label>
            </div>

            <div class="button-group">
                <button class="btn-save" @onclick="SaveProfile">Save</button>
                <button class="btn-cancel" @onclick="CloseForm">Cancel</button>
            </div>
        </div>
    </div>

}
else if (user == null)
{
    <p>Loading user info...</p>
}

@code {
    public Designer designer { get; set; } = new Designer();
    public UserDTO user { get; set; }

    private bool showForm = true;

    protected override async Task OnInitializedAsync()
    {
        string email = await Js.InvokeAsync<string>("localStorage.getItem", "userEmail");
        string id = await Js.InvokeAsync<string>("localStorage.getItem", "userId");
        try
        {
            user = await Us.GetByIdAsync(id);

            if (user == null)
            {
                showForm = false;
                return;
            }

            user.Role = "Designer";
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error during initialization: " + ex.Message);
            showForm = false;
        }
    }

    private async Task SaveProfile()
    {
        if (user == null) return;

        designer.UserId = user.Id;
        designer.ProfileImageUrl = user.ProfileImageUrl;

        

        UserDTO userDTO = new UserDTO
        {
            Id = user.Id,
            Email = user.Email,
            Password = user.Password,
            FullName = user.FullName,
            PhoneNumber = user.PhoneNumber,
            Role ="Designer",
            ProfileImageUrl = user.ProfileImageUrl,
            Reviews = user.Reviews,
            Orders = user.Orders,
            DesignerProfile = designer
        };

        await Us.UpdateUserAsync(userDTO);
        CloseForm();
    }

    private void CloseForm()
    {
        string? r = user.Role;
        showForm = false;
        Navigation.NavigateTo($"/Home/{r}");
        
      
    }
}
