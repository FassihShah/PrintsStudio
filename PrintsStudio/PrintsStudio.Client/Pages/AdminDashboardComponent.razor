@page "/admin-dashboard"

@using scd_project.Models
@using scd_project.Services
@inject OrderService OrderService
@inject ProductService ProductService
@inject UserService UserService
@inject NavigationManager Navigation

<!-- Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Lato&family=Merriweather&display=swap" rel="stylesheet" />
<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

<style>
    body {
        font-family: 'Lato', sans-serif;
        background-color: #f0f0f0;
        min-height: 100vh;
    }

    /* Sidebar */
    .sidebar {
        background: linear-gradient(135deg, #07a6a6, #242f66);
        min-height: 100vh;
        color: white;
        font-family: 'Merriweather', serif;
        padding-top: 1.5rem;
    }

        .sidebar a {
            color: #f0f0f0;
            text-decoration: none;
            display: block;
            padding: 0.75rem 1.5rem;
            border-left: 4px solid transparent;
            transition: background-color 0.3s, border-left-color 0.3s;
        }

            .sidebar a:hover,
            .sidebar a.active {
                background-color: #065353;
                border-left-color: #ceedec;
                color: #ceedec;
            }

    /* Cards */
    .card-title {
        font-family: 'Merriweather', serif;
        color: #242f66;
    }

    /* Table */
    thead {
        background: #07a6a6;
        color: white;
        font-family: 'Merriweather', serif;
    }

    .table-hover tbody tr:hover {
        background-color: #ceedec;
    }

    /* Header */
    .header-title {
        font-family: 'Merriweather', serif;
        color: #242f66;
    }

    .badge-completed {
        background-color: #28a745;
    }

    .badge-pending {
        background-color: #ffc107;
        color: #212529;
    }

    .badge-processing {
        background-color: #17a2b8;
        color: #fff;
    }

    .badge-cancelled {
        background-color: #dc3545;
    }
</style>

<div class="d-flex">
    <!-- Sidebar -->
    <nav class="sidebar flex-shrink-0 p-3" style="width: 250px;">
        <h3 class="px-3 mb-4">Prints Studio</h3>
        <ul class="nav nav-pills flex-column mb-auto">
            <li class="nav-item">
                <a href="/admin/dashboard" class="nav-link @GetActiveClass("/admin/dashboard")" aria-current="page">
                    <i class="bi bi-speedometer2 me-2"></i>Dashboard
                </a>
            </li>
            <li>
                <a href="/admin/products" class="nav-link @GetActiveClass("/admin/products")">
                    <i class="bi bi-box-seam me-2"></i>Products
                </a>
            </li>
            <li>
                <a href="/admin/orders" class="nav-link @GetActiveClass("/admin/orders")">
                    <i class="bi bi-receipt me-2"></i>Orders
                </a>
            </li>
            <li>
                <a href="/admin/customers" class="nav-link @GetActiveClass("/admin/customers")">
                    <i class="bi bi-people me-2"></i>Customers
                </a>
            </li>
            <li>
                <a href="/admin/reports" class="nav-link @GetActiveClass("/admin/reports")">
                    <i class="bi bi-graph-up me-2"></i>Reports
                </a>
            </li>
            <li>
                <a href="/admin/settings" class="nav-link @GetActiveClass("/admin/settings")">
                    <i class="bi bi-gear me-2"></i>Settings
                </a>
            </li>
        </ul>
    </nav>

    <!-- Main Content -->
    <div class="flex-grow-1 p-4">
        <h1 class="header-title mb-4">Dashboard</h1>

        @if (isLoading)
        {
            <div class="text-center my-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <!-- Summary Cards -->
            <div class="row g-4 mb-5">
                <div class="col-md-3 col-sm-6">
                    <div class="card shadow-sm">
                        <div class="card-body text-center">
                            <h5 class="card-title">Total Orders</h5>
                            <h2 class="text-primary">@dashboardData.TotalOrders</h2>
                            <small class="text-muted">Last 30 days</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="card shadow-sm">
                        <div class="card-body text-center">
                            <h5 class="card-title">Revenue</h5>
                            <h2 class="text-success">Rs. @dashboardData.TotalRevenue.ToString("N0")</h2>
                            <small class="text-muted">Last 30 days</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="card shadow-sm">
                        <div class="card-body text-center">
                            <h5 class="card-title">Products</h5>
                            <h2 class="text-info">@dashboardData.TotalProducts</h2>
                            <small class="text-muted">Available now</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="card shadow-sm">
                        <div class="card-body text-center">
                            <h5 class="card-title">Customers</h5>
                            <h2 class="text-warning">@dashboardData.TotalCustomers</h2>
                            <small class="text-muted">Registered users</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Orders Table -->
            <h3 class="mb-3">Recent Orders</h3>
            <div class="table-responsive shadow-sm">
                <table class="table table-hover align-middle">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Product</th>
                            <th>Status</th>
                            <th>Date</th>
                            <th>Total (Rs.)</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in recentOrders)
                        {
                            <tr>
                                <td>#@order.OrderId</td>
                                <td>@GetCustomerName(order.UserId)</td>
                                <td>
                                    @if (order.Items?.Any() == true)
                                    {
                                        @order.Items.First().Product?.Name
                                        @if (order.Items.Count > 1)
                                        {
                                            <span> + @(order.Items.Count - 1) more</span>
                                        }
                                    }
                                </td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(order.Status)">@order.Status</span>
                                </td>
                                <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                                <td>@order.TotalPrice.ToString("N0")</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewOrderDetails(order.OrderId)">
                                        <i class="bi bi-eye"></i> View
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Quick Actions -->
            <h3 class="mt-5 mb-3">Quick Actions</h3>
            <div class="d-flex flex-wrap gap-3">
                <button class="btn btn-primary" @onclick="NavigateToAddProduct">
                    <i class="bi bi-plus-circle"></i> Add New Product
                </button>
                <button class="btn btn-secondary" @onclick="NavigateToOrders">
                    <i class="bi bi-list-ul"></i> View All Orders
                </button>
                <button class="btn btn-success" @onclick="GenerateReport">
                    <i class="bi bi-file-earmark-bar-graph"></i> Generate Report
                </button>
                <button class="btn btn-warning text-dark" @onclick="NavigateToCustomers">
                    <i class="bi bi-people-fill"></i> Manage Customers
                </button>
            </div>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private DashboardData dashboardData = new();
    private List<Order> recentOrders = new();
    private Dictionary<string, UserDTO> userCache = new(); // Cache for user data
    private string currentUrl;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = Navigation.Uri;
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var ordersTask = OrderService.GetAllAsync();
            var productsTask = ProductService.GetAllAsync();
            var usersTask = UserService.GetAllUsersAsync();

            await Task.WhenAll(ordersTask, productsTask, usersTask);

            var orders = await ordersTask;
            var products = await productsTask;
            var users = await usersTask;

            if (orders != null && products != null && users != null)
            {
                // Cache users for quick lookup
                userCache = users.ToDictionary(u => u.Id, u => u);

                var last30Days = DateTime.Now.AddDays(-30);

                dashboardData = new DashboardData
                    {
                        TotalOrders = orders.Count(o => o.OrderDate >= last30Days),
                        TotalRevenue = orders.Where(o => o.OrderDate >= last30Days).Sum(o => o.TotalPrice),
                        TotalProducts = products.Count,
                        TotalCustomers = users.Count(u => u.Role == "Customer")
                    };

                recentOrders = orders
                    .OrderByDescending(o => o.OrderDate)
                    .Take(5)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetCustomerName(string userId)
    {
        if (userCache.TryGetValue(userId, out var user))
        {
            return user.FullName;
        }
        return "N/A";
    }

 

    private string GetActiveClass(string url)
    {
        return currentUrl.Contains(url) ? "active" : "";
    }

    private string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "badge-pending",
            OrderStatus.InProduction => "badge-processing",
            OrderStatus.Shipped => "badge-processing",
            OrderStatus.Delivered => "badge-completed",
            OrderStatus.Cancelled => "badge-cancelled",
            _ => "badge-secondary"
        };
    }

    private void ViewOrderDetails(int orderId)
    {
        Navigation.NavigateTo($"/admin/orders/{orderId}");
    }

    private void NavigateToAddProduct()
    {
        Navigation.NavigateTo("/admin/products/add");
    }

    private void NavigateToOrders()
    {
        Navigation.NavigateTo("/admin/orders");
    }

    private void NavigateToCustomers()
    {
        Navigation.NavigateTo("/admin/customers");
    }

    private async Task GenerateReport()
    {
        // In a real app, this would trigger report generation
        Console.WriteLine("Generating report...");
        // Show success message
    }

    private class DashboardData
    {
        public int TotalOrders { get; set; }
        public decimal TotalRevenue { get; set; }
        public int TotalProducts { get; set; }
        public int TotalCustomers { get; set; }
    }
}